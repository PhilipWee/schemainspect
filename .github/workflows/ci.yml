name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    name: Test on PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [14.1, 13.5, 12.9, 11.13, 10.19]
    services:
      postgres:
        image: postgres:${{ matrix.pg_version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_db
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -U postgres -d app_db; do sleep 1; done

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10

      - name: Install Poetry
        run: |
          python -m pip install -U pip setuptools poetry
          poetry config virtualenvs.create false

      - name: Set up venv and install
        run: |
          python -m venv ~/.virt
          . ~/.virt/bin/activate
          poetry install

      - name: Lint
        run: |
          . ~/.virt/bin/activate
          make lint

      - name: Test
        run: |
          . ~/.virt/bin/activate
          make test

  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pre-commit
        run: |
          python -m pip install -U pip pre-commit

      - name: Run pre-commit
        run: |
          python -m pre_commit run --show-diff-on-failure --color=always --all-files

  # publish:
  #   name: Publish to PyPI
  #   needs: [test]
  #   if: github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.10

  #     - name: Install Poetry
  #       run: |
  #         python -m pip install -U pip setuptools poetry
  #         poetry config virtualenvs.create false

  #     - name: Install deps and build
  #       run: |
  #         python -m venv ~/.virt
  #         . ~/.virt/bin/activate
  #         poetry install
  #         python deploy/vbump.py
  #         poetry build

  #     - name: Publish
  #       run: |
  #         . ~/.virt/bin/activate
  #         poetry config pypi-token.pypi ${{ secrets.PYPI_PASSWORD }}
  #         poetry publish
